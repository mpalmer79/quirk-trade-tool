# Wholesale Pricing Integration Guide

## Overview

This feature integrates **auto.dev Vehicle Listings API** to provide real-time wholesale and trade-in valuation based on comparable market listings.

### What It Does

- Fetches real dealer listings for comparable vehicles
- Analyzes market pricing data
- Calculates wholesale value (15% dealer markup)
- Calculates trade-in value (20% dealer markup)
- Displays comparable listings table
- Provides price range analysis

---

## File Locations & Setup

### Backend Files (Orchestrator)

#### 1. **`orchestrator/src/autodev/listings.ts`** (NEW)
Contains the core listing logic:
- `getVehicleListings()` - Fetch listings by Make/Model/Year/Trim
- `getListingsForVin()` - Fetch listings for decoded vehicle
- Pricing analysis calculations
- Wholesale & trade-in estimates

#### 2. **`orchestrator/src/routes/listings.ts`** (NEW)
Express routes for the API:
- `GET /api/listings` - Query listings by vehicle specs
- `POST /api/listings/compare` - Compare specific vehicle

#### 3. **`orchestrator/src/app.ts`** (UPDATED)
Main app file with new route registration:
```typescript
import listingsRoutes from './routes/listings';
app.use('/api/listings', listingsRoutes);
```

### Frontend Files

#### 4. **`frontend/hooks/useVehicleListings.ts`** (NEW)
React hook for calling the listings API:
```typescript
const { data, loading, error, fetchListings } = useVehicleListings(apiBase);
await fetchListings('Chevrolet', 'Silverado', 2020, 'LT', 45000);
```

#### 5. **`frontend/components/WholesalePricing.tsx`** (NEW)
Display component for pricing analysis:
```typescript
<WholesalePricing 
  pricing={data?.pricing}
  listings={data?.listings}
  loading={loading}
  error={error}
  vehicleTitle="2020 Chevrolet Silverado LT"
/>
```

---

## Integration Steps

### Step 1: Add Backend Files

Copy these files to your repo:

```
orchestrator/src/autodev/listings.ts
orchestrator/src/routes/listings.ts
orchestrator/src/app.ts (replace)
```

### Step 2: Add Frontend Files

Copy these files to your repo:

```
frontend/hooks/useVehicleListings.ts
frontend/components/WholesalePricing.tsx
```

### Step 3: Update ValuationForm (Integration)

Add listings fetch to the ValuationForm when VIN is decoded:

```typescript
// In frontend/app/components/ValuationForm.tsx

import { useVehicleListings } from '@/hooks/useVehicleListings';
import { WholesalePricing } from '@/components/WholesalePricing';

export default function ValuationForm({ apiBase, onAppraised }: Props) {
  // ... existing code ...

  const { data: listingsData, loading: listingsLoading, error: listingsError, fetchListings } = 
    useVehicleListings(apiBase);

  // After VIN decode success, fetch listings
  const onDecodeVinSuccess = async (decoded: any) => {
    if (decoded.make && decoded.model && decoded.year) {
      await fetchListings(
        decoded.make,
        decoded.model,
        decoded.year,
        decoded.trim,
        mileage
      );
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {/* ... existing form fields ... */}

      {/* Add pricing display after condition section */}
      <div className="mb-8 mt-8 border-t pt-8">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Market Valuation
        </h3>
        <WholesalePricing
          pricing={listingsData?.pricing}
          listings={listingsData?.listings}
          loading={listingsLoading}
          error={listingsError}
          vehicleTitle={`${watch('year')} ${watch('make')} ${watch('model')}`}
        />
      </div>

      <button type="submit" disabled={isSubmitting}
        className={`w-full py-4 rounded-lg font-semibold text-white ${isSubmitting ? "bg-gray-400" : "bg-indigo-600 hover:bg-indigo-700"}`}>
        {isSubmitting ? "Calculating..." : "Get Wholesale Value"}
      </button>
    </form>
  );
}
```

### Step 4: Verify Environment

Make sure your `.env.local` has the auto.dev API key:

```env
AUTODEV_API_KEY=sk_ad_CzPA...
```

### Step 5: Test the Feature

1. Start your orchestrator: `npm run dev`
2. Enter a VIN and let it decode (e.g., `WAUENAF45JA013729`)
3. After decode, the form should automatically fetch market listings
4. You should see:
   - Wholesale Value estimate
   - Trade-In Value estimate
   - Price range analysis
   - Comparable listings table

---

## API Endpoints

### GET /api/listings

Query vehicle listings by specs.

**Query Parameters:**
```
make=Chevrolet
model=Silverado
year=2020
trim=LT (optional)
mileage=45000 (optional, for price adjustment)
```

**Example Request:**
```bash
curl -X GET "http://localhost:4000/api/listings?make=Chevrolet&model=Silverado&year=2020&trim=LT&mileage=45000" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

**Response:**
```json
{
  "status": "success",
  "make": "Chevrolet",
  "model": "Silverado",
  "year": 2020,
  "trim": "LT",
  "listings": [
    {
      "id": "vin123",
      "title": "2020 Chevrolet Silverado LT",
      "price": 28500,
      "mileage": 42000,
      "condition": "Good",
      "dealerType": "physical",
      "dealerName": "Dave's Chevrolet",
      "dealerLocation": "Boston, MA"
    }
  ],
  "pricing": {
    "averagePrice": 29400,
    "lowestPrice": 25000,
    "highestPrice": 32000,
    "priceRange": { "min": 25000, "max": 32000 },
    "averageMileage": 45000,
    "listingCount": 28,
    "wholesaleEstimate": 24990,
    "tradeInEstimate": 23520
  }
}
```

### POST /api/listings/compare

Compare a specific vehicle against market listings.

**Request Body:**
```json
{
  "make": "Chevrolet",
  "model": "Silverado",
  "year": 2020,
  "trim": "LT",
  "mileage": 45000,
  "condition": "Good"
}
```

---

## Usage Examples

### In React Component

```typescript
function AppraisalPage() {
  const apiBase = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:4000';
  const { data, loading, error, fetchListings } = useVehicleListings(apiBase);

  const handleVinDecoded = async (vin: string, decodedVehicle: any) => {
    // Fetch listings after VIN decode
    await fetchListings(
      decodedVehicle.make,
      decodedVehicle.model,
      decodedVehicle.year,
      decodedVehicle.trim,
      currentMileage
    );
  };

  return (
    <div>
      <h1>Vehicle Appraisal</h1>
      
      <WholesalePricing
        pricing={data?.pricing}
        listings={data?.listings}
        loading={loading}
        error={error}
        vehicleTitle="2020 Chevrolet Silverado LT"
      />

      {data?.pricing && (
        <div>
          <p>Wholesale Value: ${data.pricing.wholesaleEstimate}</p>
          <p>Trade-In Value: ${data.pricing.tradeInEstimate}</p>
        </div>
      )}
    </div>
  );
}
```

---

## Pricing Calculation

The system calculates two values:

### Wholesale Estimate
```
Wholesale = Average Market Price × 0.85
```
This is 15% below market (standard dealer markup).

### Trade-In Estimate
```
Trade-In = Average Market Price × 0.80
```
This is 20% below market (higher markup for customer trade-ins).

### Mileage Adjustment
If current mileage differs from comparable listings:
```
Adjustment = (current_mileage - average_mileage) × $0.10 per mile
```

---

## Troubleshooting

| Issue | Solution |
|-------|----------|
| No listings found | Vehicle may be too new, old, or rare. Try different search terms. |
| API returns 401 | Check `AUTODEV_API_KEY` is set and valid in `.env.local` |
| Listings endpoint returns 404 | Verify route was added to `app.ts` |
| Component not displaying | Check `useVehicleListings` hook is imported correctly |
| Empty pricing data | Try with more common vehicle (e.g., 2020 Chevrolet Silverado) |

---

## Next Steps / Enhancements

1. **Historical Pricing** - Track pricing trends over time
2. **Regional Adjustments** - Adjust values by geography/ZIP code
3. **Condition Weighting** - Better condition-based adjustments
4. **Inventory Sync** - Sync your dealership inventory for direct comparisons
5. **Export Reports** - Generate PDF appraisal reports with pricing data

---

## Support

- Auto.dev Docs: https://auto.dev/docs
- Auto.dev Listings API: https://auto.dev/listings
- API Reference: https://docs.auto.dev/v2/api-reference/listings
